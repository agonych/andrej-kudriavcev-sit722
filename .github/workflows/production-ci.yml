name: CI/CD Production Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/**"
      - "terraform/**"
      - "k8s/**"
      - "tests/**"
jobs:
  build_and_push_prod_images:
    environment: Production
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      IMAGE_TAG: ${{ github.sha }}
      PROD_ACR_NAME: ${{ secrets.AZURE_ACR_NAME }}
      PROD_ACR_SERVER: ${{ secrets.AZURE_ACR_NAME }}.azurecr.io

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: ACR login
        run: az acr login --name "$PROD_ACR_NAME"

      - name: Build & Push product_service
        run: |
          docker build -t $PROD_ACR_SERVER/product_service:$IMAGE_TAG ./backend/product_service
          docker tag  $PROD_ACR_SERVER/product_service:$IMAGE_TAG $PROD_ACR_SERVER/product_service:prod-latest
          docker push $PROD_ACR_SERVER/product_service:$IMAGE_TAG
          docker push $PROD_ACR_SERVER/product_service:prod-latest

      - name: Build & Push order_service
        run: |
          docker build -t $PROD_ACR_SERVER/order_service:$IMAGE_TAG ./backend/order_service
          docker tag  $PROD_ACR_SERVER/order_service:$IMAGE_TAG $PROD_ACR_SERVER/order_service:prod-latest
          docker push $PROD_ACR_SERVER/order_service:$IMAGE_TAG
          docker push $PROD_ACR_SERVER/order_service:prod-latest

      - name: Build & Push customer_service
        run: |
          docker build -t $PROD_ACR_SERVER/customer_service:$IMAGE_TAG ./backend/customer_service
          docker tag  $PROD_ACR_SERVER/customer_service:$IMAGE_TAG $PROD_ACR_SERVER/customer_service:prod-latest
          docker push $PROD_ACR_SERVER/customer_service:$IMAGE_TAG
          docker push $PROD_ACR_SERVER/customer_service:prod-latest

      - name: Build & Push frontend
        run: |
          docker build -t $PROD_ACR_SERVER/frontend:$IMAGE_TAG ./frontend
          docker tag  $PROD_ACR_SERVER/frontend:$IMAGE_TAG $PROD_ACR_SERVER/frontend:prod-latest
          docker push $PROD_ACR_SERVER/frontend:$IMAGE_TAG
          docker push $PROD_ACR_SERVER/frontend:prod-latest

  deploy_to_production:
    environment: Production
    runs-on: ubuntu-latest
    needs: build_and_push_prod_images

    permissions:
      id-token: write
      contents: read

    env:
      PROD_ACR_SERVER: ${{ secrets.AZURE_ACR_NAME }}.azurecr.io
      IMAGE_TAG: ${{ github.sha }}
      PROD_AKS_RG: ${{ secrets.AZURE_RG_NAME }}
      PROD_AKS_NAME: ${{ secrets.AZURE_AKS_NAME }}
      STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group "$PROD_AKS_RG" --name "$PROD_AKS_NAME" --overwrite-existing

      - name: Update images with Kustomize
        working-directory: k8s/overlays/prod
        run: |
          kustomize edit set image product_service=$PROD_ACR_SERVER/product_service:$IMAGE_TAG
          kustomize edit set image order_service=$PROD_ACR_SERVER/order_service:$IMAGE_TAG
          kustomize edit set image customer_service=$PROD_ACR_SERVER/customer_service:$IMAGE_TAG
          kustomize edit set image frontend=$PROD_ACR_SERVER/frontend:$IMAGE_TAG

      - name: Get Storage Account Key
        id: storage_key
        run: |
          key=$(az storage account keys list \
            --resource-group "$PROD_AKS_RG" \
            --account-name "$STORAGE_ACCOUNT_NAME" \
            --query "[0].value" -o tsv)
          echo "STORAGE_ACCOUNT_KEY=$key" >> $GITHUB_ENV

      - name: Create Kubernetes secrets
        run: |
          kubectl create secret generic global-secrets \
            --from-literal=POSTGRES_USER=postgres \
            --from-literal=POSTGRES_PASSWORD=postgres \
            --from-literal=RABBITMQ_USER=guest \
            --from-literal=RABBITMQ_PASS=guest \
            --from-literal=AZURE_STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME \
            --from-literal=AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy with Kustomize
        run: kubectl apply -k k8s/overlays/prod

      - name: Wait for external IPs
        run: |
          echo "Waiting for product-service external IP..."
          for i in {1..30}; do
          ip=$(kubectl get svc product-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -n "$ip" ]; then echo "PRODUCT_IP=$ip" >> $GITHUB_ENV; break; fi
          sleep 10
          done
          
          echo "Waiting for order-service external IP..."
          for i in {1..30}; do
          ip=$(kubectl get svc order-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -n "$ip" ]; then echo "ORDER_IP=$ip" >> $GITHUB_ENV; break; fi
          sleep 10
          done
          
          echo "Waiting for customer-service external IP..."
          for i in {1..30}; do
          ip=$(kubectl get svc customer-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -n "$ip" ]; then echo "CUSTOMER_IP=$ip" >> $GITHUB_ENV; break; fi
          sleep 10
          done

      - name: Update frontend configmap
        run: |
          kubectl create configmap global-config \
            --from-literal=PRODUCT_SERVICE_PUBLIC_URL=http://$PRODUCT_IP:8000 \
            --from-literal=ORDER_SERVICE_PUBLIC_URL=http://$ORDER_IP:8001 \
            --from-literal=CUSTOMER_SERVICE_PUBLIC_URL=http://$CUSTOMER_IP:8002 \
            --from-literal=PRODUCT_SERVICE_URL=http://product-service:8000 \
            --from-literal=ORDER_SERVICE_URL=http://order-service:8001 \
            --from-literal=CUSTOMER_SERVICE_URL=http://customer-service:8002 \
            --from-literal=RABBITMQ_HOST=rabbitmq \
            --from-literal=RABBITMQ_PORT=5672 \
            --from-literal=PRODUCT_DB_HOST=product-db \
            --from-literal=PRODUCT_DB_NAME=products \
            --from-literal=CUSTOMER_DB_HOST=customer-db \
            --from-literal=CUSTOMER_DB_NAME=customers \
            --from-literal=ORDER_DB_HOST=order-db \
            --from-literal=ORDER_DB_NAME=orders \
            --from-literal=AZURE_STORAGE_CONTAINER_NAME=images \
            --from-literal=AZURE_SAS_TOKEN_EXPIRY_HOURS=24 \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Restart frontend
        run: kubectl rollout restart deployment frontend

      - name: Wait for frontend rollout
        run: kubectl rollout status deployment/frontend --timeout=300s
