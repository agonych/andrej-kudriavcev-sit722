name: CI (testing branch) â€” Backend Tests

on:
  push:
    branches: [ testing ]
    paths:
      - "backend/**"
      - ".github/workflows/**"
      - "terraform/**"
      - "k8s/**"

permissions:
  contents: read

jobs:

  # Job 2: Provision infrastructure with Terraform
  terraform_apply:
    environment: Testing
    runs-on: ubuntu-latest
    # needs: test_backends   # only run if tests succeed

    permissions:
      id-token: write
      contents: read

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    steps:
      # Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.7   # match your local version

      # Azure login with OIDC
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Terraform Init
      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      # Import existing resources (if any)
      - name: Terraform Import Existing Resources (if needed)
        working-directory: terraform
        run: |
          set -e
          TFVARS="-var-file=environments/staging.tfvars"
          
          # Import Resource Group if exists
          if az group show -n sit722akstagerg >/dev/null 2>&1; then
            terraform import $TFVARS azurerm_resource_group.rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/sit722akstagerg || true
          fi
          
          # Import ACR if exists
          if az acr show -n sit722akstageacr >/dev/null 2>&1; then
            terraform import $TFVARS azurerm_container_registry.acr /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/sit722akstagerg/providers/Microsoft.ContainerRegistry/registries/sit722akstageacr || true
          fi
          
          # Import AKS if exists
          if az aks show -n sit722akstageaks -g sit722akstagerg >/dev/null 2>&1; then
            terraform import $TFVARS azurerm_kubernetes_cluster.aks /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/sit722akstagerg/providers/Microsoft.ContainerService/managedClusters/sit722akstageaks || true
          fi
          
          # Import Storage Account if exists
          if az storage account show -n sit722akstagestorage -g sit722akstagerg >/dev/null 2>&1; then
            terraform import $TFVARS azurerm_storage_account.storage /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/sit722akstagerg/providers/Microsoft.Storage/storageAccounts/sit722akstagestorage || true
          fi

      # Terraform Apply (auto-approve)
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve -var-file="environments/staging.tfvars"

      # Export outputs for later jobs (like storage account name & key, ACR server)
      - name: Capture Terraform Outputs
        id: tf_outputs
        working-directory: terraform
        run: |
          acr_server=$(terraform output -raw acr_login_server)
          echo "acr_server=$acr_server" >> $GITHUB_OUTPUT
          # Extract just the registry name before the first dot
          acr_name=$(echo $acr_server | cut -d. -f1)
          echo "acr_name=$acr_name" >> $GITHUB_OUTPUT
          echo "storage_account_name=$(terraform output -raw storage_account_name)" >> $GITHUB_OUTPUT
          echo "storage_account_key=$(terraform output -raw storage_account_key)" >> $GITHUB_OUTPUT
          echo "aks_rg=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "aks_name=$(terraform output -raw aks_name)" >> $GITHUB_OUTPUT

    outputs:
      acr_server: ${{ steps.tf_outputs.outputs.acr_server }}
      acr_name: ${{ steps.tf_outputs.outputs.acr_name }}
      storage_account_name: ${{ steps.tf_outputs.outputs.storage_account_name }}
      storage_account_key: ${{ steps.tf_outputs.outputs.storage_account_key }}
      aks_rg: ${{ steps.tf_outputs.outputs.aks_rg }}
      aks_name: ${{ steps.tf_outputs.outputs.aks_name }}

  # Job 3: Build & Push Images to ACR
  build_and_push_images:
    environment: Testing
    runs-on: ubuntu-latest
    needs: terraform_apply   # only run if infra is ready

    permissions:
      id-token: write
      contents: read

    env:
      IMAGE_TAG: ${{ github.sha }}
      ACR_SERVER: ${{ needs.terraform_apply.outputs.acr_server }}
      ACR_NAME: ${{ needs.terraform_apply.outputs.acr_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to Azure (OIDC)
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Login to ACR
      - name: ACR login
        run: az acr login --name "$ACR_NAME"

      # Build and push Product Service
      - name: Build & Push product_service
        run: |
          docker build -t $ACR_SERVER/product_service:$IMAGE_TAG ./backend/product_service
          docker tag  $ACR_SERVER/product_service:$IMAGE_TAG $ACR_SERVER/product_service:staging-latest
          docker push $ACR_SERVER/product_service:$IMAGE_TAG
          docker push $ACR_SERVER/product_service:staging-latest

      # Build and push Order Service
      - name: Build & Push order_service
        run: |
          docker build -t $ACR_SERVER/order_service:$IMAGE_TAG ./backend/order_service
          docker tag  $ACR_SERVER/order_service:$IMAGE_TAG $ACR_SERVER/order_service:staging-latest
          docker push $ACR_SERVER/order_service:$IMAGE_TAG
          docker push $ACR_SERVER/order_service:staging-latest

      # Build and push Customer Service
      - name: Build & Push customer_service
        run: |
          docker build -t $ACR_SERVER/customer_service:$IMAGE_TAG ./backend/customer_service
          docker tag  $ACR_SERVER/customer_service:$IMAGE_TAG $ACR_SERVER/customer_service:staging-latest
          docker push $ACR_SERVER/customer_service:$IMAGE_TAG
          docker push $ACR_SERVER/customer_service:staging-latest

      # Build and push Frontend
      - name: Build & Push frontend
        run: |
          docker build -t $ACR_SERVER/frontend:$IMAGE_TAG ./frontend
          docker tag  $ACR_SERVER/frontend:$IMAGE_TAG $ACR_SERVER/frontend:staging-latest
          docker push $ACR_SERVER/frontend:$IMAGE_TAG
          docker push $ACR_SERVER/frontend:staging-latest
